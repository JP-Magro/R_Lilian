knitr::opts_chunk$set(echo = TRUE
,results = 'show'
,error=FALSE
,warning=FALSE
,message=FALSE)
#'*Coleta e manipulação de dados*
library(tidyverse)
library(lubridate)
library(plyr)
library(kableExtra)
library(readr)
DicLil <- read_csv("tabela_correspondencia_alimentos_agricultura familiar PNAE - alimento_processamento.csv")
View(DicLil)
knitr::opts_chunk$set(echo = TRUE
,results = 'show'
,error=FALSE
,warning=FALSE
,message=FALSE)
DicLil <- read_csv("tabela_correspondencia_alimentos_agricultura familiar PNAE - alimento_processamento.csv")
knitr::opts_chunk$set(echo = TRUE
,results = 'show'
,error=FALSE
,warning=FALSE
,message=FALSE)
#'*Coleta e manipulação de dados*
library(tidyverse)
library(lubridate)
library(plyr)
library(kableExtra)
library(readr)
library(readxl)
DicLil <- read_csv("tabela_correspondencia_alimentos_agricultura familiar PNAE - alimento_processamento.csv")
CadProd <- read_excel("POF1718/Cadastro de Produtos.xls", col_types = c("text", "text", "text"))
View(CadProd)
distinct(CadProd$QUADRO)
unique(CadProd$QUADRO)
CadProd <- CadProd|>
filter(QUADRO == "63 a 69")
colnames(CadProd) <- c(Qudro,CodProdPOF,DescProd)
colnames(CadProd) <- c("Quadro","CodProdPOF","DescProd")
CadProd <- CadProd|>
filter(QUADRO == "63 a 69")|>
mutate(DescProd = tolower(DescProd))
CadProd <- CadProd|>
filter(Quadro == "63 a 69")|>
mutate(DescProd = tolower(DescProd))
CadProd <- CadProd|>
mutate(DescProd = tolower(DescProd))|.
DicLil <- read_csv("tabela_correspondencia_alimentos_agricultura familiar PNAE - alimento_processamento.csv")
colnames(CadProd) <- c("Quadro","CodProdPOF","DescProd")
CadProd <- CadProd|>
mutate(DescProd = tolower(DescProd))|>
filter(Quadro == "63 a 69", !str_detect("agregado"))
CadProd <- CadProd|>
mutate(DescProd = tolower(DescProd))|>
filter(Quadro == "63 a 69", str_detect("agregado"))
CadProd <- CadProd|>
mutate(DescProd = tolower(DescProd))|>
filter(Quadro == "63 a 69", !str_detect(DescProd,"agregado"))
View(CadProd)
CadProd <- CadProd|>
mutate(DescProd = tolower(DescProd))|>
filter(Quadro == "63 a 69", !str_detect(DescProd,"agregado"),
!str_detect(DescProd,"viagem"))
CadProd <- CadProd|>
CadProd <- CadProd|>
mutate(DescProd = tolower(DescProd))|>
filter(Quadro == "63 a 69", !str_detect(DescProd,c("refrigerante","viagem","agregado")))
CadProd <- CadProd|>
mutate(DescProd = tolower(DescProd))|>
filter(Quadro == "63 a 69", !str_detect(DescProd,c("refrigerante","viagem","agregado")))
CadProd <- CadProd|>
mutate(DescProd = tolower(DescProd))|>
filter(Quadro == "63 a 69",
!str_detect(DescProd,"refrigerante"),
!str_detect(DescProd,"viagem"),
!str_detect(DescProd,"agregado"))
CadProd <- CadProd|>
mutate(DescProd = tolower(DescProd))|>
filter(Quadro == "63 a 69",
!str_detect(DescProd,"refrigerante"),
!str_detect(DescProd,"viagem"),
!str_detect(DescProd,"agregado"),
CodProdPOF < 8600101)
Dic1 <- <- fuzzy_join()
Dic1 <- fuzzy_join()
library(dplyr)
Dic1 <- fuzzy_join()
View(DicLil)
View(CadProd)
knitr::opts_chunk$set(echo = TRUE
,results = 'show'
,error=FALSE
,warning=FALSE
,message=FALSE)
#Tabela posterior
DicLil <- read_csv("tabela_correspondencia_alimentos_agricultura familiar PNAE - alimento_processamento.csv")
knitr::opts_chunk$set(echo = TRUE
,results = 'show'
,error=FALSE
,warning=FALSE
,message=FALSE)
library(tidyverse)
library(lubridate)
library(dplyr)
library(kableExtra)
library(readr)
library(readxl)
library(fuzzyjoin)
#Tabela posterior
DicLil <- read_csv("tabela_correspondencia_alimentos_agricultura familiar PNAE - alimento_processamento.csv")
View(DicLil)
#Cadastro de indexadores de alimentos
CadProdAlim <- read_excel("POF1718/Cadastro de Produtos do Consumo Alimentar.xls", col_types = c("text", "text"))
#Selecionando as colunas do dicionário fornecido pela lilian e excluindo o nome das marcas
DicLil <- DicLil|>
filter(`marca (1=sim; 0=não)` == "x")|>
select("y",item, processamento, variedade)
View(DicLil)
#Alterando o nome das colunas
colnames(CadProdAlim) <- c("CodProdPOF","DescProd")
colnames(DicLil) <- c("RawUsed", "Item", "Proce", "Vari")
#transformando as strings do cadastro de alimentos para strings simples
CadProdAlim <- CadProdAlim|>
mutate(DescProd = tolower(DescProd),
RawUsedPOF = word(DescProd, 1)) #Spliting indentifyer from IBGE's Dic.
View(DicLil)
DicLil[DicLil == "x"]<- NA
#Juntando o dicionário de produtos da PNAE e da POF pela string, admitindo uma distância (diferença) de até um caractere:
JoinProdAlimTemp <- DicLil|>
stringdist_left_join(CadProdAlim, by = c("RawUsed"="RawUsedPOF"), max_dist = 0)
JoinProdAlimTemp <- DicLil|>
stringdist_left_join(CadProdAlim, by = c("RawUsed"="RawUsedPOF"), max_dist = 0)
#Filtrando as observações dos dois dicionários que foram indexadas com sucesso
JoinProdAlim0 <- JoinProdAlimTemp|>
filter(!is.na(CodProdPOF))
#Filtrando as observações dos dois dicionários que foram indexadas sem sucesso
JoinProdAlimTemp <- JoinProdAlimTemp|>
filter(is.na(CodProdPOF))
View(JoinProdAlimTemp)
#Selecionando informações de interesse para a próxima rodada
JoinProdAlimTemp <- JoinProdAlimTemp|>
select(RawUsed,Item,Proce,Vari)
#Juntando o dicionário de produtos da PNAE e da POF pela string, admitindo uma distância (diferença) de até um caractere
JoinProdAlimTemp <- JoinProdAlimTemp|>
stringdist_left_join(CadProdAlim, by = c("RawUsed"="RawUsedPOF"), max_dist = 1)
#Filtrando as observações dos dois dicionários que foram indexadas com sucesso
JoinProdAlim0 <- JoinProdAlimTemp|>
filter(!is.na(CodProdPOF))
#Juntando o dicionário de produtos da PNAE e da POF pela string, admitindo uma distância (diferença) de nenhum caractere
JoinProdAlimTemp <- DicLil|>
stringdist_left_join(CadProdAlim, by = c("RawUsed"="RawUsedPOF"), max_dist = 0)
#Filtrando as observações dos dois dicionários que foram indexadas com sucesso
JoinProdAlim0 <- JoinProdAlimTemp|>
filter(!is.na(CodProdPOF))
#Filtrando as observações dos dois dicionários que foram indexadas sem sucesso
JoinProdAlimTemp <- JoinProdAlimTemp|>
filter(is.na(CodProdPOF))
#Selecionando informações de interesse para a próxima rodada
JoinProdAlimTemp <- JoinProdAlimTemp|>
select(RawUsed,Item,Proce,Vari)
#Juntando o dicionário de produtos da PNAE e da POF pela string, admitindo uma distância (diferença) de até um caractere
JoinProdAlimTemp <- JoinProdAlimTemp|>
stringdist_left_join(CadProdAlim, by = c("RawUsed"="RawUsedPOF"), max_dist = 1)
#Filtrando as observações dos dois dicionários que foram indexadas com sucesso
JoinProdAlim1 <- JoinProdAlimTemp|>
filter(!is.na(CodProdPOF))
JoinProdAlimTemp <- JoinProdAlimTemp|>
filter(is.na(CodProdPOF))
#Juntando o dicionário de produtos da PNAE e da POF pela string, admitindo uma distância (diferença) de até um caractere
JoinProdAlimTemp <- JoinProdAlimTemp|>
stringdist_left_join(CadProdAlim, by = c("RawUsed"="RawUsedPOF"), max_dist = 1)
#Filtrando as observações dos dois dicionários que foram indexadas com sucesso
JoinProdAlim1 <- JoinProdAlimTemp|>
filter(!is.na(CodProdPOF))
#Filtrando as observações dos dois dicionários que foram indexadas com sucesso
JoinProdAlim1 <- JoinProdAlimTemp|>
filter(!is.na(CodProdPOF))
#Filtrando as observações dos dois dicionários que foram indexadas sem sucesso
JoinProdAlimTemp <- JoinProdAlimTemp|>
filter(is.na(CodProdPOF))
#Juntando o dicionário de produtos da PNAE e da POF pela string, admitindo uma distância (diferença) de nenhum caractere
JoinProdAlimTemp <- DicLil|>
stringdist_left_join(CadProdAlim, by = c("RawUsed"="RawUsedPOF"), max_dist = 0)
#Filtrando as observações dos dois dicionários que foram indexadas com sucesso
JoinProdAlim0 <- JoinProdAlimTemp|>
filter(!is.na(CodProdPOF))
#Filtrando as observações dos dois dicionários que foram indexadas sem sucesso
JoinProdAlimTemp <- JoinProdAlimTemp|>
filter(is.na(CodProdPOF))
#Selecionando informações de interesse para a próxima rodada
JoinProdAlimTemp <- JoinProdAlimTemp|>
select(RawUsed,Item,Proce,Vari)
#Juntando o dicionário de produtos da PNAE e da POF pela string, admitindo uma distância (diferença) de até um caractere
JoinProdAlimTemp <- JoinProdAlimTemp|>
stringdist_left_join(CadProdAlim, by = c("RawUsed"="RawUsedPOF"), max_dist = 1)
#Filtrando as observações dos dois dicionários que foram indexadas com sucesso
JoinProdAlim1 <- JoinProdAlimTemp|>
filter(!is.na(CodProdPOF))
#Filtrando as observações dos dois dicionários que foram indexadas sem sucesso
JoinProdAlimTemp <- JoinProdAlimTemp|>
filter(is.na(CodProdPOF))
#Selecionando informações de interesse para a próxima rodada
JoinProdAlimTemp <- JoinProdAlimTemp|>
select(RawUsed,Item,Proce,Vari)
